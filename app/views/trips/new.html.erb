<div class="create-trip-first">

  <%= simple_form_for @trip do |f| %>
    <%= f.input :name %>
    <%= f.input :start_date, as: :string, required: true, input_html: {class: "datepicker"} %>
    <%= f.input :end_date, as: :string, required: true, input_html: {class: "datepicker"} %>
    <%= f.simple_fields_for :participant do |p| %>
    <%= p.input :email %>
    <% end %>

</div>

<div class="create-trip-second">


<!-- MAP DIV -->


<div class="create-trip-second">





<div id="map-example-container"></div>
  <%= f.input :destination, input_html: {id: "input-map", type: "search", class: "form-control", placeholder: "Where are we going?"} %>


<style>
  #map-example-container {height: 300px};
</style>

<script src="https://cdn.jsdelivr.net/npm/places.js@1.16.1"></script>
<script>
(function() {
  var placesAutocomplete = places({
    appId: 'ENV["ALGOLIA_SEARCH_APP_ID"]',
    apiKey: 'ENV["ALGOLIA_SEARCH_API_KEY"]',
    container: document.querySelector('#input-map')
  });

  var map = L.map('map-example-container', {
    scrollWheelZoom: false,
    zoomControl: false
  });

  var osmLayer = new L.TileLayer(
    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      minZoom: 1,
      maxZoom: 13,
      attribution: 'Map data Â© <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }
  );

  var markers = [];

  map.setView(new L.LatLng(0, 0), 1);
  map.addLayer(osmLayer);

  placesAutocomplete.on('suggestions', handleOnSuggestions);
  placesAutocomplete.on('cursorchanged', handleOnCursorchanged);
  placesAutocomplete.on('change', handleOnChange);
  placesAutocomplete.on('clear', handleOnClear);

  function handleOnSuggestions(e) {
    markers.forEach(removeMarker);
    markers = [];

    if (e.suggestions.length === 0) {
      map.setView(new L.LatLng(0, 0), 1);
      return;
    }

    e.suggestions.forEach(addMarker);
    findBestZoom();
  }

  function handleOnChange(e) {
    markers
      .forEach(function(marker, markerIndex) {
        if (markerIndex === e.suggestionIndex) {
          markers = [marker];
          marker.setOpacity(1);
          findBestZoom();
        } else {
          removeMarker(marker);
        }
      });
  }

  function handleOnClear() {
    map.setView(new L.LatLng(0, 0), 1);
    markers.forEach(removeMarker);
  }

  function handleOnCursorchanged(e) {
    markers
      .forEach(function(marker, markerIndex) {
        if (markerIndex === e.suggestionIndex) {
          marker.setOpacity(1);
          marker.setZIndexOffset(1000);
        } else {
          marker.setZIndexOffset(0);
          marker.setOpacity(0.5);
        }
      });
  }

  function addMarker(suggestion) {
    var marker = L.marker(suggestion.latlng, {opacity: .4});
    marker.addTo(map);
    markers.push(marker);
  }

  function removeMarker(marker) {
    map.removeLayer(marker);
  }

  function findBestZoom() {
    var featureGroup = L.featureGroup(markers);
    map.fitBounds(featureGroup.getBounds().pad(0.5), {animate: false});
  }
})();
</script>

<!-- END OF MAP DIV -->

  <%= f.input :photo %>
  <%= f.input :photo_cache, as: :hidden %>

</div>



</div>





  <%= f.submit "Create trip", class: "btn btn-flat" %>
  <% end %>
